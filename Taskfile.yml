version: '3'

vars:
  MIGRATE_IMAGE: migrate/migrate:v4.16.2
  COMPOSE_DEV_FILE: docker-compose.dev.yml
  DEV_ENV_FILE: .env.dev

tasks:
  default:
    cmds:
      - task --list
      - echo "run \`task --summary task-name\` to print complete command summary"
    silent: true

  unit:
    desc: run unit tests
    summary:
      Run all unit tests on host machine
    cmds:
      - go test -v -tags=unit ./...

  integration:
    desc: run integration tests
    summary:
      Run all integration tests. Tests use the testcontainers library. All infrastructure is run in docker containers,
      test code is run on host. Test code itself specifies what containers it needs.
    cmds:
      - go test -v -tags=integration ./...

  run:
    desc: start the containerized infrastructure and run the app
    cmds:
      - docker compose -f {{.COMPOSE_DEV_FILE}} --env-file={{.DEV_ENV_FILE}} up --build

  migration:
    desc: create new SQL migration files
    summary:
      run like `task migration -- migration_file_name`
      
      SQL migration files are stored in ./migrations and are managed using https://github.com/golang-migrate/migrate.
      
      golan-migrate is run as a Docker container. No need to have it installed.
    cmds:
      # -u $(id -u):$(id -g) is to have correct file permission on host. If you remove this,
      # the files will be owned by root (because migrate in the container runs as root)
      - docker run -v "$(pwd)/migrations":/migrations:rw -u $(id -u):$(id -g) {{.MIGRATE_IMAGE}} create -ext sql -dir migrations -seq {{.CLI_ARGS}}

  # TODO: running migration up and down if needed
  # docker compose -f {{.COMPOSE_DEV_FILE}} run --rm migrate up
  # docker compose -f {{.COMPOSE_DEV_FILE}} run --rm migrate down